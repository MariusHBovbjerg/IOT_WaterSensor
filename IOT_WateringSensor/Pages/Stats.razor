@page "/stats"
@using IOT_WateringSensor.Data
@using IOT_WateringSensor.Database
@using Microsoft.EntityFrameworkCore
@using System.Timers
@inject WaterSensorDbContext dBContext
@inject IHttpContextAccessor HttpContextAccessor
<div>
	@{
		if (!Elements.Any())
		{
			<MudText>
				Uh oh!
			</MudText>
			<MudText>
				It looks like you haven't registered any sensors yet.
			</MudText>
			<MudText>
				Please go to the <MudLink Href="/register">registration</MudLink> page to register your sensors
			</MudText>
		}
		else
		{
			<div>
				<MudChart ChartType="ChartType.Line" ChartSeries="@Series" @bind-SelectedIndex="Index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>
				<MudText Typo="Typo.h6">Desired data points</MudText>
				<MudNumericField @bind-Value="DesiredElementsInChart" Variant="Variant.Outlined" Min="2" Max="50"/>	
			</div>

			<MudTable Items="@Elements" Hover="true" Breakpoint="Breakpoint.Sm" Loading="@_loading" LoadingProgressColor="Color.Info">
				<HeaderContent>
					<MudTh>Client</MudTh>
					<MudTh>Timestamp</MudTh>
					<MudTh>Moisture (%)</MudTh>
				</HeaderContent>
				<RowTemplate>
					<MudTd DataLabel="Client">@context.DeviceId</MudTd>
					<MudTd DataLabel="Timestamp">@context.TimeStamp</MudTd>
					<MudTd DataLabel="Moisture">@context.Moisture%</MudTd>
				</RowTemplate>
			</MudTable>
		}
	}
</div>

@code {
	private bool _loading = true;
	private IEnumerable<SensorData> Elements = new List<SensorData>();
	public List<ChartSeries> Series = new();
	public string[] XAxisLabels = {};
	
	private Timer timer = new (1000);
	
	private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
	
	private int _desired = 10;
	public int DesiredElementsInChart
	{
		get { return _desired; }
		set { _desired = value;
			getData();
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await getData();
		timer.Elapsed += OnTimedEvent;
		timer.AutoReset = true;
		timer.Enabled = true;
	}

	private void OnTimedEvent(Object source, ElapsedEventArgs e)
	{
		getData();
	}

	protected async Task getData()
	{

		//update table
		
		var user = HttpContextAccessor.HttpContext.User.Identity;
		
		var userId = dBContext.Users.FirstOrDefault(u => u.UserName == user.Name).Id;
		
		var usersDevices = dBContext.UserToDeviceBindings.Where(d => d.UserId == userId).Select(d => d.DeviceId).ToList();

		Elements = await dBContext.SensorData.Where(x => usersDevices.Contains(x.DeviceId.ToString()) ).OrderByDescending(x => x.TimeStamp).Take(DesiredElementsInChart).ToListAsync();

		if(Elements.Count() == 0)
		{
			return;
		}
		//update chart

		var ChartData = await dBContext.SensorData.Where(x => usersDevices.Contains(x.DeviceId.ToString())).GroupBy(x => x.DeviceId).Select(group =>

			new
			{
				Name = group.Key,
				SensorData = group.OrderByDescending(x => x.TimeStamp).Take(DesiredElementsInChart).OrderBy(x => x.TimeStamp).ToList()
			}
		).ToListAsync();

		var newSeries = new List<ChartSeries>();

		ChartData.ForEach(group => newSeries.Add(new ChartSeries() { Name = group.Name.ToString().Split('-')[0], Data = group.SensorData.Select(data => (double)data.Moisture).ToArray() }));
		var longestDataset = ChartData.Select(g => g.SensorData.Count()).Max();

		// Make sure plot doesn't break if there is less data than the desired amount
		var ElementsInChart = Math.Min(DesiredElementsInChart, longestDataset);


		var flat = ChartData.SelectMany(g => g.SensorData.Select(o => o.TimeStamp).ToArray());
		var max = flat.Max();
		var min = flat.Min();

		var interpolationSpan = max.Subtract(min).Divide(ElementsInChart);

		List<string> axis = new List<string>();

		//Interpolate between highest and lowest time reading in dataset and add x axis labels for it
		for (var i = 0; i <= ElementsInChart; i++)
		{
			axis.Add(min.Add(interpolationSpan.Multiply(i)).ToLongTimeString());
		}
		
		XAxisLabels = axis.ToArray();
		Series = newSeries;

		await InvokeAsync(() => StateHasChanged());
	}
}