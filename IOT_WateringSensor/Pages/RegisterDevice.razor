@page "/register"
@using IOT_WateringSensor.Database
@using Microsoft.AspNetCore.Components
@inject WaterSensorDbContext dBContext
@inject IHttpContextAccessor HttpContextAccessor
<div>
	<EditForm Model="@exampleModel" OnValidSubmit="HandleValidSubmit">
		
		<ValidationSummary />
		<div class="form-group">
			<label for="@exampleModel.deviceId">DeviceId</label>
			<InputText class="form-control" id="Name" @bind-Value="exampleModel.deviceId"/>
		
		</div>
		
		<div class="form-group">
			<label for="@exampleModel.bindingKey">BindingKey</label>
			<InputText class="form-control" id="Description" @bind-Value="exampleModel.bindingKey" />
			
			
		</div>

		<button type="submit" class="btn btn-primary">Submit</button>
		
	</EditForm>

	@{
		if (answerGoesHard)
		{
			<p>Successfully registered device!</p>
		}
		if (failed)
		{
			<p>Failed to register device!</p>
		}
	}
</div>
@code {
	
	[Parameter]
	public bool answerGoesHard { get; set; } = false;
	[Parameter]
	public bool failed { get; set; } = false;

	public class RegisterDeviceRequest
	{
		public string? deviceId { get; set; }
		public string? bindingKey { get; set; }
	}

	RegisterDeviceRequest exampleModel = new();
	
	async void HandleValidSubmit()
	{

		var user = HttpContextAccessor.HttpContext.User.Identity;
		
		var userFromDb = dBContext.Users.FirstOrDefault(u => u.UserName == user.Name);

		if (userFromDb == null)
		{
			failed = true;
			answerGoesHard = false;
			await InvokeAsync(StateHasChanged);
			return;
		}
		var binding = dBContext.UserToDeviceBindings.FirstOrDefault(x => x.DeviceId == exampleModel.deviceId);
        
		if(binding == null)
		{
			failed = true;
			answerGoesHard = false;
			await InvokeAsync(StateHasChanged);
			return;
		}
        
		if(binding.isBound)
		{
			failed = true;
			answerGoesHard = false;
			await InvokeAsync(StateHasChanged);
			return;
		}

		if (binding.bindingKey != exampleModel.bindingKey)
		{
			failed = true;
			answerGoesHard = false;
			await InvokeAsync(StateHasChanged);
			return;
		}
        
		binding.UserId = userFromDb.Id;
		binding.isBound = true;

		await dBContext.SaveChangesAsync();

		answerGoesHard = true;
		failed = false;
		await InvokeAsync(StateHasChanged);
	}
}